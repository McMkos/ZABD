Create:



Read:

\\znajdź wszystkie dokumenty, zwróć 3 z nich
db.accounts.find().limit(3)

\\znajdź wszystkie dokumenty, posegreguj je po dacie urodzenia rosnąco, zwróć 6 pierwszych dokumentów zawierających jedynie 3 wskazane pola (+id)
db.customers.find({}, {username:1, name:1, birthdate:1}).sort({birthdate:1}).limit(6)

\\znajdź wszystkie dokumenty, posegreguj je po dacie urodzenia rosnąco, zwróć 6 pierwszych dokumentów z pominięciem 3 zawierających jedynie 3 wskazane pola (+id)
db.customers.find({}, {username:1, name:1, birthdate:1}).sort({birthdate:1}).limit(6).skip(3)

\\znajdź dokument o zadanej wartości wskazanego pola, oraz zwróć dokument zawierający jedynie wskazane pole
db.customers.find({username:'valenciajennifer'}, {_id:0, tier_and_details:1})

\\znajdź dokumenty o wartości wskazanego pola z zadanego przedziału, posegreguj je po dacie urodzenia rosnąco, zwróć dokumenty zawierające 2 wskazane pola(bez id)
db.customers.find({birthdate:{$gte: ISODate("1980-01-01T00:00:00.000+00:00"), $lte: ISODate("1981-01-01T00:00:00.000+00:00")}}, {_id:0, name:1, birthdate:1}).sort({birthdate:1})

  \\na dokumencie zagnieżdżonym
db.theaters.find({"location.address.state": {$in: ['TX', 'PA']}}, {"location.geo":0}).limit(3)

\\kolejność pól wyszukiwanego dokumentu zagnieżdżonego ma znaczenie
db.transactions.find({transactions: 
{
    date: ISODate("2008-03-19T00:00:00.000+00:00"),
    amount: 8592,
    symbol: "amd",
    transaction_code: "buy",
    price: "6.25868566899633460565155473886989057064056396484375",
    total: "53774.62726801650693175815832"
}},

{
    transactions: 0
}

)

//wyszukuje dokumenty gdzie pierwszy element tablicy obiektów transakcji ma pole total większe lub równe 500  
db.transactions.find({"transactions.0.total":{$gte:"500.0"}},{'transactions':0}).limit(3)
db.transactions.find({transactions:{$elemMatc:{$or }}},{})


Update:



Delete:


Kursor - obiekt tworzony podczas wykonywania zapytania, wskazuje na zbiór zwróconych w wyniku zapytania dokumentów i filtruje je w odpowiedni sposób.
